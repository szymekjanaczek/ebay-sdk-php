<?php
/**
 * DO NOT EDIT THIS FILE!
 *
 * This file was automatically generated from external sources.
 *
 * Any manual change here will be lost the next time the SDK
 * is updated. You've been warned!
 */

namespace DTS\eBaySDK\Marketing\Services;

use DTS\eBaySDK\Marketing\Types\BulkCreateAdsByInventoryReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\BulkCreateAdsByInventoryReferenceRestResponse;
use GuzzleHttp\Promise\PromiseInterface;
use DTS\eBaySDK\Marketing\Types\BulkCreateAdsByListingIDRestRequest;
use DTS\eBaySDK\Marketing\Types\BulkCreateAdsByListingIDRestResponse;
use DTS\eBaySDK\Marketing\Types\BulkDeleteAdsByInventoryReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\BulkDeleteAdsByInventoryReferenceRestResponse;
use DTS\eBaySDK\Marketing\Types\BulkDeleteAdsByListingIDRestRequest;
use DTS\eBaySDK\Marketing\Types\BulkDeleteAdsByListingIDRestResponse;
use DTS\eBaySDK\Marketing\Types\BulkUpdateAdBidsByInventoryReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\BulkUpdateAdBidsByInventoryReferenceRestResponse;
use DTS\eBaySDK\Marketing\Types\BulkUpdateAdBidsByListingIDRestRequest;
use DTS\eBaySDK\Marketing\Types\BulkUpdateAdBidsByListingIDRestResponse;
use DTS\eBaySDK\Marketing\Types\CreateAdByListingIDRestRequest;
use DTS\eBaySDK\Marketing\Types\CreateAdByListingIDRestResponse;
use DTS\eBaySDK\Marketing\Types\CreateAdsByInventoryReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\CreateAdsByInventoryReferenceRestResponse;
use DTS\eBaySDK\Marketing\Types\DeleteAdByIDRestRequest;
use DTS\eBaySDK\Marketing\Types\DeleteAdByIDRestResponse;
use DTS\eBaySDK\Marketing\Types\DeleteAdsByInventoryReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\DeleteAdsByInventoryReferenceRestResponse;
use DTS\eBaySDK\Marketing\Types\GetAdByIDRestRequest;
use DTS\eBaySDK\Marketing\Types\GetAdByIDRestResponse;
use DTS\eBaySDK\Marketing\Types\GetAdsRestRequest;
use DTS\eBaySDK\Marketing\Types\GetAdsRestResponse;
use DTS\eBaySDK\Marketing\Types\GetAdsByInventoryReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\GetAdsByInventoryReferenceRestResponse;
use DTS\eBaySDK\Marketing\Types\UpdateBidRestRequest;
use DTS\eBaySDK\Marketing\Types\UpdateBidRestResponse;
use DTS\eBaySDK\Marketing\Types\CloneCampaignRestRequest;
use DTS\eBaySDK\Marketing\Types\CloneCampaignRestResponse;
use DTS\eBaySDK\Marketing\Types\CreateCampaignRestRequest;
use DTS\eBaySDK\Marketing\Types\CreateCampaignRestResponse;
use DTS\eBaySDK\Marketing\Types\DeleteCampaignRestRequest;
use DTS\eBaySDK\Marketing\Types\DeleteCampaignRestResponse;
use DTS\eBaySDK\Marketing\Types\EndCampaignRestRequest;
use DTS\eBaySDK\Marketing\Types\EndCampaignRestResponse;
use DTS\eBaySDK\Marketing\Types\FindCampaignByAdReferenceRestRequest;
use DTS\eBaySDK\Marketing\Types\FindCampaignByAdReferenceRestResponse;
use DTS\eBaySDK\Marketing\Types\GetAllCampaignsRestRequest;
use DTS\eBaySDK\Marketing\Types\GetAllCampaignsRestResponse;
use DTS\eBaySDK\Marketing\Types\GetCampaignByNameRestRequest;
use DTS\eBaySDK\Marketing\Types\GetCampaignByNameRestResponse;
use DTS\eBaySDK\Marketing\Types\GetCampaignByIDRestRequest;
use DTS\eBaySDK\Marketing\Types\GetCampaignByIDRestResponse;
use DTS\eBaySDK\Marketing\Types\PauseCampaignRestRequest;
use DTS\eBaySDK\Marketing\Types\PauseCampaignRestResponse;
use DTS\eBaySDK\Marketing\Types\ResumeCampaignRestRequest;
use DTS\eBaySDK\Marketing\Types\ResumeCampaignRestResponse;
use DTS\eBaySDK\Marketing\Types\UpdateCampaignIDentificationRestRequest;
use DTS\eBaySDK\Marketing\Types\UpdateCampaignIDentificationRestResponse;
use DTS\eBaySDK\Marketing\Types\CreateItemPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\CreateItemPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\DeleteItemPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\DeleteItemPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\GetItemPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\GetItemPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\UpdateItemPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\UpdateItemPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\GetListingsInSpecificPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\GetListingsInSpecificPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\GetPromotionsRestRequest;
use DTS\eBaySDK\Marketing\Types\GetPromotionsRestResponse;
use DTS\eBaySDK\Marketing\Types\PauseAPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\PauseAPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\ResumeAPromotionRestRequest;
use DTS\eBaySDK\Marketing\Types\ResumeAPromotionRestResponse;
use DTS\eBaySDK\Marketing\Types\GetPromotionSummaryReportRestRequest;
use DTS\eBaySDK\Marketing\Types\GetPromotionSummaryReportRestResponse;
use DTS\eBaySDK\Marketing\Types\GetSpecificReportRestRequest;
use DTS\eBaySDK\Marketing\Types\GetSpecificReportRestResponse;
use DTS\eBaySDK\Marketing\Types\GetMetadataForAllReportsRestRequest;
use DTS\eBaySDK\Marketing\Types\GetMetadataForAllReportsRestResponse;
use DTS\eBaySDK\Marketing\Types\GetMetadataForAReportTypeRestRequest;
use DTS\eBaySDK\Marketing\Types\GetMetadataForAReportTypeRestResponse;
use DTS\eBaySDK\Marketing\Types\CreateReportTaskRestRequest;
use DTS\eBaySDK\Marketing\Types\DeleteSpecificReportTaskRestRequest;
use DTS\eBaySDK\Marketing\Types\DeleteSpecificReportTaskRestResponse;
use DTS\eBaySDK\Marketing\Types\GetReportTasksRestRequest;
use DTS\eBaySDK\Marketing\Types\GetReportTasksRestResponse;
use DTS\eBaySDK\Marketing\Types\GetSpecificReportTaskRestRequest;
use DTS\eBaySDK\Marketing\Types\GetSpecificReportTaskRestResponse;
use DTS\eBaySDK\Marketing\Types\GetAPromotionReportRestRequest;
use DTS\eBaySDK\Marketing\Types\GetAPromotionReportRestResponse;
class MarketingService extends MarketingBaseService
{
    const API_VERSION = 'v1';

    /**
     * @property array $operations Associative array of operations provided by the service.
     */
    protected static $operations = [
        'BulkCreateAdsByInventoryReference' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/bulk_create_ads_by_inventory_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\BulkCreateAdsByInventoryReferenceRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'BulkCreateAdsByListingID' => [
            'method' => 'POST',
            'resource' => 'campaign/{campaign_id}/bulk_create_ads_by_listing_id',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\BulkCreateAdsByListingIDRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'BulkDeleteAdsByInventoryReference' => [
            'method' => 'POST',
            'resource' => 'campaign/{campaign_id}/bulk_delete_ads_by_inventory_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\BulkDeleteAdsByInventoryReferenceRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'BulkDeleteAdsByListingID' => [
            'method' => 'POST',
            'resource' => 'campaign/{campaign_id}/bulk_delete_ads_by_listing_id',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\BulkDeleteAdsByListingIDRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'BulkUpdateAdBidsByInventoryReference' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/bulk_update_ads_bid_by_inventory_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\BulkUpdateAdBidsByInventoryReferenceRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'BulkUpdateAdBidsByListingID' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/bulk_update_ads_bid_by_listing_id',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\BulkUpdateAdBidsByListingIDRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateAdByListingID' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/ad',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\CreateAdByListingIDRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateAdsByInventoryReference' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/create_ads_by_inventory_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\CreateAdsByInventoryReferenceRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DeleteAdByID' => [
            'method' => 'DELETE',
            'resource' => 'ad_campaign/{campaign_id}/ad/{ad_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\DeleteAdByIDRestResponse',
            'params' => [
                'ad_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DeleteAdsByInventoryReference' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/delete_ads_by_inventory_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\DeleteAdsByInventoryReferenceRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetAdByID' => [
            'method' => 'GET',
            'resource' => 'ad_campaign/{campaign_id}/ad/{ad_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetAdByIDRestResponse',
            'params' => [
                'ad_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetAds' => [
            'method' => 'GET',
            'resource' => 'ad_campaign/{campaign_id}/ad',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetAdsRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'limit' => [
                    'valid' => ['string']
                ],
                'listing_ids' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'offset' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'GetAdsByInventoryReference' => [
            'method' => 'GET',
            'resource' => 'ad_campaign/{campaign_id}/get_ads_by_inventory_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetAdsByInventoryReferenceRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'inventory_reference_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'inventory_reference_type' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'UpdateBid' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/ad/{ad_id}/update_bid',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\UpdateBidRestResponse',
            'params' => [
                'ad_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CloneCampaign' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/clone',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\CloneCampaignRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateCampaign' => [
            'method' => 'POST',
            'resource' => 'ad_campaign',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\CreateCampaignRestResponse',
            'params' => [
            ]
        ],
        'DeleteCampaign' => [
            'method' => 'DELETE',
            'resource' => 'ad_campaign/{campaign_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\DeleteCampaignRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'EndCampaign' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/end',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\EndCampaignRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'FindCampaignByAdReference' => [
            'method' => 'GET',
            'resource' => 'ad_campaign/find_campaign_by_ad_reference',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\FindCampaignByAdReferenceRestResponse',
            'params' => [
                'inventory_reference_id' => [
                    'valid' => ['string']
                ],
                'inventory_reference_type' => [
                    'valid' => ['string']
                ],
                'listing_id' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'GetAllCampaigns' => [
            'method' => 'GET',
            'resource' => 'ad_campaign',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetAllCampaignsRestResponse',
            'params' => [
                'campaign_name' => [
                    'valid' => ['string']
                ],
                'campaign_status' => [
                    'valid' => ['string']
                ],
                'end_date_range' => [
                    'valid' => ['string']
                ],
                'limit' => [
                    'valid' => ['string']
                ],
                'offset' => [
                    'valid' => ['string']
                ],
                'start_date_range' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'GetCampaignByName' => [
            'method' => 'GET',
            'resource' => 'ad_campaign/get_campaign_by_name',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetCampaignByNameRestResponse',
            'params' => [
                'campaign_name' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetCampaignByID' => [
            'method' => 'GET',
            'resource' => 'ad_campaign/{campaign_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetCampaignByIDRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'PauseCampaign' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/pause',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\PauseCampaignRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'ResumeCampaign' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/resume',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\ResumeCampaignRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'UpdateCampaignIDentification' => [
            'method' => 'POST',
            'resource' => 'ad_campaign/{campaign_id}/update_campaign_identification',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\UpdateCampaignIDentificationRestResponse',
            'params' => [
                'campaign_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateItemPromotion' => [
            'method' => 'POST',
            'resource' => 'item_promotion',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\CreateItemPromotionRestResponse',
            'params' => [
            ]
        ],
        'DeleteItemPromotion' => [
            'method' => 'DELETE',
            'resource' => 'item_promotion/{promotion_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\DeleteItemPromotionRestResponse',
            'params' => [
                'promotion_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetItemPromotion' => [
            'method' => 'GET',
            'resource' => 'item_promotion/{promotion_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetItemPromotionRestResponse',
            'params' => [
                'promotion_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'UpdateItemPromotion' => [
            'method' => 'PUT',
            'resource' => 'item_promotion/{promotion_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\UpdateItemPromotionRestResponse',
            'params' => [
                'promotion_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetListingsInSpecificPromotion' => [
            'method' => 'GET',
            'resource' => 'promotion/{promotion_id}/get_listing_set',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetListingsInSpecificPromotionRestResponse',
            'params' => [
                'promotion_id' => [
                    'valid' => ['string']
                ],
                'limit' => [
                    'valid' => ['string']
                ],
                'offset' => [
                    'valid' => ['string']
                ],
                'q' => [
                    'valid' => ['string']
                ],
                'sort' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'GetPromotions' => [
            'method' => 'GET',
            'resource' => 'promotion',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetPromotionsRestResponse',
            'params' => [
                'limit' => [
                    'valid' => ['string']
                ],
                'marketplace_id' => [
                    'valid' => ['string']
                ],
                'offset' => [
                    'valid' => ['string']
                ],
                'promotion_status' => [
                    'valid' => ['string']
                ],
                'q' => [
                    'valid' => ['string']
                ],
                'sort' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'PauseAPromotion' => [
            'method' => 'POST',
            'resource' => 'promotion/{promotion_id}/pause',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\PauseAPromotionRestResponse',
            'params' => [
                'promotion_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'ResumeAPromotion' => [
            'method' => 'POST',
            'resource' => 'promotion/{promotion_id}/resume',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\ResumeAPromotionRestResponse',
            'params' => [
                'promotion_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetPromotionSummaryReport' => [
            'method' => 'GET',
            'resource' => 'promotion_summary_report',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetPromotionSummaryReportRestResponse',
            'params' => [
                'marketplace_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetSpecificReport' => [
            'method' => 'GET',
            'resource' => 'ad_report/{report_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetSpecificReportRestResponse',
            'params' => [
                'report_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetMetadataForAllReports' => [
            'method' => 'GET',
            'resource' => 'ad_report_metadata',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetMetadataForAllReportsRestResponse',
            'params' => [
            ]
        ],
        'GetMetadataForAReportType' => [
            'method' => 'GET',
            'resource' => 'ad_report_metadata/{report_type}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetMetadataForAReportTypeRestResponse',
            'params' => [
                'report_type' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateReportTask' => [
            'method' => 'POST',
            'resource' => 'ad_report_task',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\CreateReportTasktRestResponse',
            'params' => [
            ]
        ],
        'DeleteSpecificReportTask' => [
            'method' => 'DELETE',
            'resource' => 'ad_report_task/{report_task_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\DeleteSpecificReportTaskRestResponse',
            'params' => [
                'report_task_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetReportTasks' => [
            'method' => 'GET',
            'resource' => 'ad_report_task',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetReportTasksRestResponse',
            'params' => [
                'limit' => [
                    'valid' => ['string']
                ],
                'offset' => [
                    'valid' => ['string']
                ],
                'report_task_statuses' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'GetSpecificReportTask' => [
            'method' => 'GET',
            'resource' => 'ad_report_task/{report_task_id}',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetSpecificReportTaskRestResponse',
            'params' => [
                'report_task_id' => [
                    'valid' => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetAPromotionReport' => [
            'method' => 'GET',
            'resource' => 'promotion_report',
            'responseClass' => '\DTS\eBaySDK\Marketing\Types\GetAPromotionReportRestResponse',
            'params' => [
                'limit' => [
                    'valid' => ['string']
                ],
                'marketplace_id' => [
                    'valid' => ['string'],
                    'required' => true
                ],
                'offset' => [
                    'valid' => ['string']
                ],
                'promotion_status' => [
                    'valid' => ['string']
                ],
                'q' => [
                    'valid' => ['string']
                ]
            ]
        ]
    ];

    /**
     * @param array $config Configuration option values.
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }

    /**
     * @param BulkCreateAdsByInventoryReferenceRestRequest $request
     * @return BulkCreateAdsByInventoryReferenceRestResponse
     */
    public function bulkCreateAdsByInventoryReference(BulkCreateAdsByInventoryReferenceRestRequest $request)
    {
        return $this->bulkCreateAdsByInventoryReferenceAsync($request)->wait();
    }

    /**
     * @param BulkCreateAdsByInventoryReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function bulkCreateAdsByInventoryReferenceAsync(BulkCreateAdsByInventoryReferenceRestRequest $request)
    {
        return $this->callOperationAsync('BulkCreateAdsByInventoryReference', $request);
    }

    /**
     * @param BulkCreateAdsByListingIDRestRequest $request
     * @return BulkCreateAdsByListingIDRestResponse
     */
    public function bulkCreateAdsByListingID(BulkCreateAdsByListingIDRestRequest $request)
    {
        return $this->bulkCreateAdsByListingIDAsync($request)->wait();
    }

    /**
     * @param BulkCreateAdsByListingIDRestRequest $request
     * @return PromiseInterface
     */
    public function bulkCreateAdsByListingIDAsync(BulkCreateAdsByListingIDRestRequest $request)
    {
        return $this->callOperationAsync('BulkCreateAdsByListingID', $request);
    }

    /**
     * @param BulkDeleteAdsByInventoryReferenceRestRequest $request
     * @return BulkDeleteAdsByInventoryReferenceRestResponse
     */
    public function bulkDeleteAdsByInventoryReference(BulkDeleteAdsByInventoryReferenceRestRequest $request)
    {
        return $this->bulkDeleteAdsByInventoryReferenceAsync($request)->wait();
    }

    /**
     * @param BulkDeleteAdsByInventoryReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function bulkDeleteAdsByInventoryReferenceAsync(BulkDeleteAdsByInventoryReferenceRestRequest $request)
    {
        return $this->callOperationAsync('BulkDeleteAdsByInventoryReference', $request);
    }

    /**
     * @param BulkDeleteAdsByListingIDRestRequest $request
     * @return BulkDeleteAdsByListingIDRestResponse
     */
    public function bulkDeleteAdsByListingID(BulkDeleteAdsByListingIDRestRequest $request)
    {
        return $this->bulkDeleteAdsByListingIDAsync($request)->wait();
    }

    /**
     * @param BulkDeleteAdsByListingIDRestRequest $request
     * @return PromiseInterface
     */
    public function bulkDeleteAdsByListingIDAsync(BulkDeleteAdsByListingIDRestRequest $request)
    {
        return $this->callOperationAsync('BulkDeleteAdsByListingID', $request);
    }

    /**
     * @param BulkUpdateAdBidsByInventoryReferenceRestRequest $request
     * @return BulkUpdateAdBidsByInventoryReferenceRestResponse
     */
    public function bulkUpdateAdBidsByInventoryReference(BulkUpdateAdBidsByInventoryReferenceRestRequest $request)
    {
        return $this->bulkUpdateAdBidsByInventoryReferenceAsync($request)->wait();
    }

    /**
     * @param BulkUpdateAdBidsByInventoryReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function bulkUpdateAdBidsByInventoryReferenceAsync(BulkUpdateAdBidsByInventoryReferenceRestRequest $request)
    {
        return $this->callOperationAsync('BulkUpdateAdBidsByInventoryReference', $request);
    }

    /**
     * @param BulkUpdateAdBidsByListingIDRestRequest $request
     * @return BulkUpdateAdBidsByListingIDRestResponse
     */
    public function bulkUpdateAdBidsByListingID(BulkUpdateAdBidsByListingIDRestRequest $request)
    {
        return $this->bulkUpdateAdBidsByListingIDAsync($request)->wait();
    }

    /**
     * @param BulkUpdateAdBidsByListingIDRestRequest $request
     * @return PromiseInterface
     */
    public function bulkUpdateAdBidsByListingIDAsync(BulkUpdateAdBidsByListingIDRestRequest $request)
    {
        return $this->callOperationAsync('BulkUpdateAdBidsByListingID', $request);
    }

    /**
     * @param CreateAdByListingIDRestRequest $request
     * @return CreateAdByListingIDRestResponse
     */
    public function createAdByListingID(CreateAdByListingIDRestRequest $request)
    {
        return $this->createAdByListingIDAsync($request)->wait();
    }

    /**
     * @param CreateAdByListingIDRestRequest $request
     * @return PromiseInterface
     */
    public function createAdByListingIDAsync(CreateAdByListingIDRestRequest $request)
    {
        return $this->callOperationAsync('CreateAdByListingID', $request);
    }

    /**
     * @param CreateAdsByInventoryReferenceRestRequest $request
     * @return CreateAdsByInventoryReferenceRestResponse
     */
    public function createAdsByInventoryReference(CreateAdsByInventoryReferenceRestRequest $request)
    {
        return $this->createAdsByInventoryReferenceAsync($request)->wait();
    }

    /**
     * @param CreateAdsByInventoryReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function createAdsByInventoryReferenceAsync(CreateAdsByInventoryReferenceRestRequest $request)
    {
        return $this->callOperationAsync('CreateAdsByInventoryReference', $request);
    }

    /**
     * @param DeleteAdByIDRestRequest $request
     * @return DeleteAdByIDRestResponse
     */
    public function deleteAdByID(DeleteAdByIDRestRequest $request)
    {
        return $this->deleteAdByIDAsync($request)->wait();
    }

    /**
     * @param DeleteAdByIDRestRequest $request
     * @return PromiseInterface
     */
    public function deleteAdByIDAsync(DeleteAdByIDRestRequest $request)
    {
        return $this->callOperationAsync('DeleteAdByID', $request);
    }

    /**
     * @param DeleteAdsByInventoryReferenceRestRequest $request
     * @return DeleteAdsByInventoryReferenceRestResponse
     */
    public function deleteAdsByInventoryReference(DeleteAdsByInventoryReferenceRestRequest $request)
    {
        return $this->deleteAdsByInventoryReferenceAsync($request)->wait();
    }

    /**
     * @param DeleteAdsByInventoryReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function deleteAdsByInventoryReferenceAsync(DeleteAdsByInventoryReferenceRestRequest $request)
    {
        return $this->callOperationAsync('DeleteAdsByInventoryReference', $request);
    }

    /**
     * @param GetAdByIDRestRequest $request
     * @return GetAdByIDRestResponse
     */
    public function getAdByID(GetAdByIDRestRequest $request)
    {
        return $this->getAdByIDAsync($request)->wait();
    }

    /**
     * @param GetAdByIDRestRequest $request
     * @return PromiseInterface
     */
    public function getAdByIDAsync(GetAdByIDRestRequest $request)
    {
        return $this->callOperationAsync('GetAdByID', $request);
    }

    /**
     * @param GetAdsRestRequest $request
     * @return GetAdsRestResponse
     */
    public function getAds(GetAdsRestRequest $request)
    {
        return $this->getAdsAsync($request)->wait();
    }

    /**
     * @param GetAdsRestRequest $request
     * @return PromiseInterface
     */
    public function getAdsAsync(GetAdsRestRequest $request)
    {
        return $this->callOperationAsync('GetAds', $request);
    }

    /**
     * @param GetAdsByInventoryReferenceRestRequest $request
     * @return GetAdsByInventoryReferenceRestResponse
     */
    public function getAdsByInventoryReference(GetAdsByInventoryReferenceRestRequest $request)
    {
        return $this->getAdsByInventoryReferenceAsync($request)->wait();
    }

    /**
     * @param GetAdsByInventoryReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function getAdsByInventoryReferenceAsync(GetAdsByInventoryReferenceRestRequest $request)
    {
        return $this->callOperationAsync('GetAdsByInventoryReference', $request);
    }

    /**
     * @param UpdateBidRestRequest $request
     * @return UpdateBidRestResponse
     */
    public function updateBid(UpdateBidRestRequest $request)
    {
        return $this->updateBidAsync($request)->wait();
    }

    /**
     * @param UpdateBidRestRequest $request
     * @return PromiseInterface
     */
    public function updateBidAsync(UpdateBidRestRequest $request)
    {
        return $this->callOperationAsync('UpdateBid', $request);
    }

    /**
     * @param CloneCampaignRestRequest $request
     * @return CloneCampaignRestResponse
     */
    public function cloneCampaign(CloneCampaignRestRequest $request)
    {
        return $this->cloneCampaignAsync($request)->wait();
    }

    /**
     * @param CloneCampaignRestRequest $request
     * @return PromiseInterface
     */
    public function cloneCampaignAsync(CloneCampaignRestRequest $request)
    {
        return $this->callOperationAsync('CloneCampaign', $request);
    }

    /**
     * @param CreateCampaignRestRequest $request
     * @return CreateCampaignRestResponse
     */
    public function createCampaign(CreateCampaignRestRequest $request)
    {
        return $this->createCampaignAsync($request)->wait();
    }

    /**
     * @param CreateCampaignRestRequest $request
     * @return PromiseInterface
     */
    public function createCampaignAsync(CreateCampaignRestRequest $request)
    {
        return $this->callOperationAsync('CreateCampaign', $request);
    }

    /**
     * @param DeleteCampaignRestRequest $request
     * @return DeleteCampaignRestResponse
     */
    public function deleteCampaign(DeleteCampaignRestRequest $request)
    {
        return $this->deleteCampaignAsync($request)->wait();
    }

    /**
     * @param DeleteCampaignRestRequest $request
     * @return PromiseInterface
     */
    public function deleteCampaignAsync(DeleteCampaignRestRequest $request)
    {
        return $this->callOperationAsync('DeleteCampaign', $request);
    }

    /**
     * @param EndCampaignRestRequest $request
     * @return EndCampaignRestResponse
     */
    public function endCampaign(EndCampaignRestRequest $request)
    {
        return $this->endCampaignAsync($request)->wait();
    }

    /**
     * @param EndCampaignRestRequest $request
     * @return PromiseInterface
     */
    public function endCampaignAsync(EndCampaignRestRequest $request)
    {
        return $this->callOperationAsync('EndCampaign', $request);
    }

    /**
     * @param FindCampaignByAdReferenceRestRequest $request
     * @return FindCampaignByAdReferenceRestResponse
     */
    public function findCampaignByAdReference(FindCampaignByAdReferenceRestRequest $request)
    {
        return $this->findCampaignByAdReferenceAsync($request)->wait();
    }

    /**
     * @param FindCampaignByAdReferenceRestRequest $request
     * @return PromiseInterface
     */
    public function findCampaignByAdReferenceAsync(FindCampaignByAdReferenceRestRequest $request)
    {
        return $this->callOperationAsync('FindCampaignByAdReference', $request);
    }

    /**
     * @param GetAllCampaignsRestRequest $request
     * @return GetAllCampaignsRestResponse
     */
    public function getAllCampaigns(GetAllCampaignsRestRequest $request)
    {
        return $this->getAllCampaignsAsync($request)->wait();
    }

    /**
     * @param GetAllCampaignsRestRequest $request
     * @return PromiseInterface
     */
    public function getAllCampaignsAsync(GetAllCampaignsRestRequest $request)
    {
        return $this->callOperationAsync('GetAllCampaigns', $request);
    }

    /**
     * @param GetCampaignByNameRestRequest $request
     * @return GetCampaignByNameRestResponse
     */
    public function getCampaignByName(GetCampaignByNameRestRequest $request)
    {
        return $this->getCampaignByNameAsync($request)->wait();
    }

    /**
     * @param GetCampaignByNameRestRequest $request
     * @return PromiseInterface
     */
    public function getCampaignByNameAsync(GetCampaignByNameRestRequest $request)
    {
        return $this->callOperationAsync('GetCampaignByName', $request);
    }

    /**
     * @param GetCampaignByIDRestRequest $request
     * @return GetCampaignByIDRestResponse
     */
    public function getCampaignByID(GetCampaignByIDRestRequest $request)
    {
        return $this->getCampaignByIDAsync($request)->wait();
    }

    /**
     * @param GetCampaignByIDRestRequest $request
     * @return PromiseInterface
     */
    public function getCampaignByIDAsync(GetCampaignByIDRestRequest $request)
    {
        return $this->callOperationAsync('GetCampaignByID', $request);
    }

    /**
     * @param PauseCampaignRestRequest $request
     * @return PauseCampaignRestResponse
     */
    public function pauseCampaign(PauseCampaignRestRequest $request)
    {
        return $this->pauseCampaignAsync($request)->wait();
    }

    /**
     * @param PauseCampaignRestRequest $request
     * @return PromiseInterface
     */
    public function pauseCampaignAsync(PauseCampaignRestRequest $request)
    {
        return $this->callOperationAsync('PauseCampaign', $request);
    }

    /**
     * @param ResumeCampaignRestRequest $request
     * @return ResumeCampaignRestResponse
     */
    public function resumeCampaign(ResumeCampaignRestRequest $request)
    {
        return $this->resumeCampaignAsync($request)->wait();
    }

    /**
     * @param ResumeCampaignRestRequest $request
     * @return PromiseInterface
     */
    public function resumeCampaignAsync(ResumeCampaignRestRequest $request)
    {
        return $this->callOperationAsync('ResumeCampaign', $request);
    }

    /**
     * @param UpdateCampaignIDentificationRestRequest $request
     * @return UpdateCampaignIDentificationRestResponse
     */
    public function updateCampaignIDentification(UpdateCampaignIDentificationRestRequest $request)
    {
        return $this->updateCampaignIDentificationAsync($request)->wait();
    }

    /**
     * @param UpdateCampaignIDentificationRestRequest $request
     * @return PromiseInterface
     */
    public function updateCampaignIDentificationAsync(UpdateCampaignIDentificationRestRequest $request)
    {
        return $this->callOperationAsync('UpdateCampaignIDentification', $request);
    }

    /**
     * @param CreateItemPromotionRestRequest $request
     * @return CreateItemPromotionRestResponse
     */
    public function createItemPromotion(CreateItemPromotionRestRequest $request)
    {
        return $this->createItemPromotionAsync($request)->wait();
    }

    /**
     * @param CreateItemPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function createItemPromotionAsync(CreateItemPromotionRestRequest $request)
    {
        return $this->callOperationAsync('CreateItemPromotion', $request);
    }

    /**
     * @param DeleteItemPromotionRestRequest $request
     * @return DeleteItemPromotionRestResponse
     */
    public function deleteItemPromotion(DeleteItemPromotionRestRequest $request)
    {
        return $this->deleteItemPromotionAsync($request)->wait();
    }

    /**
     * @param DeleteItemPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function deleteItemPromotionAsync(DeleteItemPromotionRestRequest $request)
    {
        return $this->callOperationAsync('DeleteItemPromotion', $request);
    }

    /**
     * @param GetItemPromotionRestRequest $request
     * @return GetItemPromotionRestResponse
     */
    public function getItemPromotion(GetItemPromotionRestRequest $request)
    {
        return $this->getItemPromotionAsync($request)->wait();
    }

    /**
     * @param GetItemPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function getItemPromotionAsync(GetItemPromotionRestRequest $request)
    {
        return $this->callOperationAsync('GetItemPromotion', $request);
    }

    /**
     * @param UpdateItemPromotionRestRequest $request
     * @return UpdateItemPromotionRestResponse
     */
    public function updateItemPromotion(UpdateItemPromotionRestRequest $request)
    {
        return $this->updateItemPromotionAsync($request)->wait();
    }

    /**
     * @param UpdateItemPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function updateItemPromotionAsync(UpdateItemPromotionRestRequest $request)
    {
        return $this->callOperationAsync('UpdateItemPromotion', $request);
    }

    /**
     * @param GetListingsInSpecificPromotionRestRequest $request
     * @return GetListingsInSpecificPromotionRestResponse
     */
    public function getListingsInSpecificPromotion(GetListingsInSpecificPromotionRestRequest $request)
    {
        return $this->getListingsInSpecificPromotionAsync($request)->wait();
    }

    /**
     * @param GetListingsInSpecificPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function getListingsInSpecificPromotionAsync(GetListingsInSpecificPromotionRestRequest $request)
    {
        return $this->callOperationAsync('GetListingsInSpecificPromotion', $request);
    }

    /**
     * @param GetPromotionsRestRequest $request
     * @return GetPromotionsRestResponse
     */
    public function getPromotions(GetPromotionsRestRequest $request)
    {
        return $this->getPromotionsAsync($request)->wait();
    }

    /**
     * @param GetPromotionsRestRequest $request
     * @return PromiseInterface
     */
    public function getPromotionsAsync(GetPromotionsRestRequest $request)
    {
        return $this->callOperationAsync('GetPromotions', $request);
    }

    /**
     * @param PauseAPromotionRestRequest $request
     * @return PauseAPromotionRestResponse
     */
    public function pauseAPromotion(PauseAPromotionRestRequest $request)
    {
        return $this->pauseAPromotionAsync($request)->wait();
    }

    /**
     * @param PauseAPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function pauseAPromotionAsync(PauseAPromotionRestRequest $request)
    {
        return $this->callOperationAsync('PauseAPromotion', $request);
    }

    /**
     * @param ResumeAPromotionRestRequest $request
     * @return ResumeAPromotionRestResponse
     */
    public function resumeAPromotion(ResumeAPromotionRestRequest $request)
    {
        return $this->resumeAPromotionAsync($request)->wait();
    }

    /**
     * @param ResumeAPromotionRestRequest $request
     * @return PromiseInterface
     */
    public function resumeAPromotionAsync(ResumeAPromotionRestRequest $request)
    {
        return $this->callOperationAsync('ResumeAPromotion', $request);
    }

    /**
     * @param GetPromotionSummaryReportRestRequest $request
     * @return GetPromotionSummaryReportRestResponse
     */
    public function getPromotionSummaryReport(GetPromotionSummaryReportRestRequest $request)
    {
        return $this->getPromotionSummaryReportAsync($request)->wait();
    }

    /**
     * @param GetPromotionSummaryReportRestRequest $request
     * @return PromiseInterface
     */
    public function getPromotionSummaryReportAsync(GetPromotionSummaryReportRestRequest $request)
    {
        return $this->callOperationAsync('GetPromotionSummaryReport', $request);
    }

    /**
     * @param GetSpecificReportRestRequest $request
     * @return GetSpecificReportRestResponse
     */
    public function getSpecificReport(GetSpecificReportRestRequest $request)
    {
        return $this->getSpecificReportAsync($request)->wait();
    }

    /**
     * @param GetSpecificReportRestRequest $request
     * @return PromiseInterface
     */
    public function getSpecificReportAsync(GetSpecificReportRestRequest $request)
    {
        return $this->callOperationAsync('GetSpecificReport', $request);
    }

    /**
     * @param GetMetadataForAllReportsRestRequest $request
     * @return GetMetadataForAllReportsRestResponse
     */
    public function getMetadataForAllReports(GetMetadataForAllReportsRestRequest $request)
    {
        return $this->getMetadataForAllReportsAsync($request)->wait();
    }

    /**
     * @param GetMetadataForAllReportsRestRequest $request
     * @return PromiseInterface
     */
    public function getMetadataForAllReportsAsync(GetMetadataForAllReportsRestRequest $request)
    {
        return $this->callOperationAsync('GetMetadataForAllReports', $request);
    }

    /**
     * @param GetMetadataForAReportTypeRestRequest $request
     * @return GetMetadataForAReportTypeRestResponse
     */
    public function getMetadataForAReportType(GetMetadataForAReportTypeRestRequest $request)
    {
        return $this->getMetadataForAReportTypeAsync($request)->wait();
    }

    /**
     * @param GetMetadataForAReportTypeRestRequest $request
     * @return PromiseInterface
     */
    public function getMetadataForAReportTypeAsync(GetMetadataForAReportTypeRestRequest $request)
    {
        return $this->callOperationAsync('GetMetadataForAReportType', $request);
    }

    /**
     * @param CreateReportTaskRestRequest $request
     * @return \DTS\eBaySDK\Marketing\Types\CreateReportTasktRestResponse
     */
    public function createReportTask(CreateReportTaskRestRequest $request)
    {
        return $this->createReportTaskAsync($request)->wait();
    }

    /**
     * @param CreateReportTaskRestRequest $request
     * @return PromiseInterface
     */
    public function createReportTaskAsync(CreateReportTaskRestRequest $request)
    {
        return $this->callOperationAsync('CreateReportTask', $request);
    }

    /**
     * @param DeleteSpecificReportTaskRestRequest $request
     * @return DeleteSpecificReportTaskRestResponse
     */
    public function deleteSpecificReportTask(DeleteSpecificReportTaskRestRequest $request)
    {
        return $this->deleteSpecificReportTaskAsync($request)->wait();
    }

    /**
     * @param DeleteSpecificReportTaskRestRequest $request
     * @return PromiseInterface
     */
    public function deleteSpecificReportTaskAsync(DeleteSpecificReportTaskRestRequest $request)
    {
        return $this->callOperationAsync('DeleteSpecificReportTask', $request);
    }

    /**
     * @param GetReportTasksRestRequest $request
     * @return GetReportTasksRestResponse
     */
    public function getReportTasks(GetReportTasksRestRequest $request)
    {
        return $this->getReportTasksAsync($request)->wait();
    }

    /**
     * @param GetReportTasksRestRequest $request
     * @return PromiseInterface
     */
    public function getReportTasksAsync(GetReportTasksRestRequest $request)
    {
        return $this->callOperationAsync('GetReportTasks', $request);
    }

    /**
     * @param GetSpecificReportTaskRestRequest $request
     * @return GetSpecificReportTaskRestResponse
     */
    public function getSpecificReportTask(GetSpecificReportTaskRestRequest $request)
    {
        return $this->getSpecificReportTaskAsync($request)->wait();
    }

    /**
     * @param GetSpecificReportTaskRestRequest $request
     * @return PromiseInterface
     */
    public function getSpecificReportTaskAsync(GetSpecificReportTaskRestRequest $request)
    {
        return $this->callOperationAsync('GetSpecificReportTask', $request);
    }

    /**
     * @param GetAPromotionReportRestRequest $request
     * @return GetAPromotionReportRestResponse
     */
    public function getAPromotionReport(GetAPromotionReportRestRequest $request)
    {
        return $this->getAPromotionReportAsync($request)->wait();
    }

    /**
     * @param GetAPromotionReportRestRequest $request
     * @return PromiseInterface
     */
    public function getAPromotionReportAsync(GetAPromotionReportRestRequest $request)
    {
        return $this->callOperationAsync('GetAPromotionReport', $request);
    }
}
