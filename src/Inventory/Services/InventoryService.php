<?php

/**
 * DO NOT EDIT THIS FILE!
 *
 * This file was automatically generated from external sources.
 *
 * Any manual change here will be lost the next time the SDK
 * is updated. You've been warned!
 */

namespace DTS\eBaySDK\Inventory\Services;

use DTS\eBaySDK\Inventory\Types\BulkUpdatePriceAndQuantityRestRequest;
use DTS\eBaySDK\Inventory\Types\BulkUpdatePriceAndQuantityRestResponse;
use GuzzleHttp\Promise\PromiseInterface;
use DTS\eBaySDK\Inventory\Types\CreateOrReplaceInventoryItemRestRequest;
use DTS\eBaySDK\Inventory\Types\CreateOrReplaceInventoryItemRestResponse;
use DTS\eBaySDK\Inventory\Types\DeleteInventoryItemRestRequest;
use DTS\eBaySDK\Inventory\Types\DeleteInventoryItemRestResponse;
use DTS\eBaySDK\Inventory\Types\GetInventoryItemRestRequest;
use DTS\eBaySDK\Inventory\Types\GetInventoryItemRestResponse;
use DTS\eBaySDK\Inventory\Types\GetInventoryItemsRestRequest;
use DTS\eBaySDK\Inventory\Types\GetInventoryItemsRestResponse;
use DTS\eBaySDK\Inventory\Types\CreateOrReplaceInventoryItemGroupRestRequest;
use DTS\eBaySDK\Inventory\Types\CreateOrReplaceInventoryItemGroupRestResponse;
use DTS\eBaySDK\Inventory\Types\DeleteInventoryItemGroupRestRequest;
use DTS\eBaySDK\Inventory\Types\DeleteInventoryItemGroupRestResponse;
use DTS\eBaySDK\Inventory\Types\GetInventoryItemGroupRestRequest;
use DTS\eBaySDK\Inventory\Types\GetInventoryItemGroupRestResponse;
use DTS\eBaySDK\Inventory\Types\BulkMigrateListingsRestRequest;
use DTS\eBaySDK\Inventory\Types\BulkMigrateListingsRestResponse;
use DTS\eBaySDK\Inventory\Types\CreateInventoryLocationRestRequest;
use DTS\eBaySDK\Inventory\Types\CreateInventoryLocationRestResponse;
use DTS\eBaySDK\Inventory\Types\DeleteInventoryLocationRestRequest;
use DTS\eBaySDK\Inventory\Types\DeleteInventoryLocationRestResponse;
use DTS\eBaySDK\Inventory\Types\DisableInventoryLocationRestRequest;
use DTS\eBaySDK\Inventory\Types\DisableInventoryLocationRestResponse;
use DTS\eBaySDK\Inventory\Types\EnableInventoryLocationRestRequest;
use DTS\eBaySDK\Inventory\Types\EnableInventoryLocationRestResponse;
use DTS\eBaySDK\Inventory\Types\GetInventoryLocationRestRequest;
use DTS\eBaySDK\Inventory\Types\GetInventoryLocationRestResponse;
use DTS\eBaySDK\Inventory\Types\GetInventoryLocationsRestRequest;
use DTS\eBaySDK\Inventory\Types\GetInventoryLocationsRestResponse;
use DTS\eBaySDK\Inventory\Types\UpdateInventoryLocationRestRequest;
use DTS\eBaySDK\Inventory\Types\UpdateInventoryLocationRestResponse;
use DTS\eBaySDK\Inventory\Types\CreateOfferRestRequest;
use DTS\eBaySDK\Inventory\Types\CreateOfferRestResponse;
use DTS\eBaySDK\Inventory\Types\DeleteOfferRestRequest;
use DTS\eBaySDK\Inventory\Types\DeleteOfferRestResponse;
use DTS\eBaySDK\Inventory\Types\GetListingFeesRestRequest;
use DTS\eBaySDK\Inventory\Types\GetListingFeesRestResponse;
use DTS\eBaySDK\Inventory\Types\GetOfferRestRequest;
use DTS\eBaySDK\Inventory\Types\GetOfferRestResponse;
use DTS\eBaySDK\Inventory\Types\GetOffersRestRequest;
use DTS\eBaySDK\Inventory\Types\GetOffersRestResponse;
use DTS\eBaySDK\Inventory\Types\PublishOfferRestRequest;
use DTS\eBaySDK\Inventory\Types\PublishOfferRestResponse;
use DTS\eBaySDK\Inventory\Types\WithdrawOfferRestRequest;
use DTS\eBaySDK\Inventory\Types\WithdrawOfferRestResponse;
use DTS\eBaySDK\Inventory\Types\UpdateOfferRestRequest;
use DTS\eBaySDK\Inventory\Types\UpdateOfferRestResponse;
use DTS\eBaySDK\Inventory\Types\CreateOrReplaceProductCompatibilityRestRequest;
use DTS\eBaySDK\Inventory\Types\CreateOrReplaceProductCompatibilityRestResponse;
use DTS\eBaySDK\Inventory\Types\DeleteProductCompatibilityRestRequest;
use DTS\eBaySDK\Inventory\Types\DeleteProductCompatibilityRestResponse;
use DTS\eBaySDK\Inventory\Types\GetProductCompatibilityRestRequest;
use DTS\eBaySDK\Inventory\Types\GetProductCompatibilityRestResponse;
use DTS\eBaySDK\Inventory\Types\PublishOfferByInventoryItemGroupRestRequest;
use DTS\eBaySDK\Inventory\Types\PublishOfferByInventoryItemGroupRestResponse;

class InventoryService extends InventoryBaseService
{
    const API_VERSION = 'v1';

    /**
     * @property array $operations Associative array of operations provided by the service.
     */
    protected static $operations = [
        'BulkUpdatePriceAndQuantity'          => [
            'method'        => 'POST',
            'resource'      => 'bulk_update_price_quantity',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\BulkUpdatePriceAndQuantityRestResponse',
            'params'        => []
        ],
        'CreateOrReplaceInventoryItem'        => [
            'method'        => 'PUT',
            'resource'      => 'inventory_item/{sku}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\CreateOrReplaceInventoryItemRestResponse',
            'params'        => [
                'sku' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DeleteInventoryItem'                 => [
            'method'        => 'DELETE',
            'resource'      => 'inventory_item/{sku}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\DeleteInventoryItemRestResponse',
            'params'        => [
                'sku' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetInventoryItem'                    => [
            'method'        => 'GET',
            'resource'      => 'inventory_item/{sku}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetInventoryItemRestResponse',
            'params'        => [
                'sku' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetInventoryItems'                   => [
            'method'        => 'GET',
            'resource'      => 'inventory_item',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetInventoryItemsRestResponse',
            'params'        => [
                'limit'  => [
                    'valid' => ['string']
                ],
                'offset' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'CreateOrReplaceInventoryItemGroup'   => [
            'method'        => 'PUT',
            'resource'      => 'inventory_item_group/{inventoryItemGroupKey}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\CreateOrReplaceInventoryItemGroupRestResponse',
            'params'        => [
                'inventoryItemGroupKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DeleteInventoryItemGroup'            => [
            'method'        => 'DELETE',
            'resource'      => 'inventory_item_group/{inventoryItemGroupKey}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\DeleteInventoryItemGroupRestResponse',
            'params'        => [
                'inventoryItemGroupKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetInventoryItemGroup'               => [
            'method'        => 'GET',
            'resource'      => 'inventory_item_group/{inventoryItemGroupKey}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetInventoryItemGroupRestResponse',
            'params'        => [
                'inventoryItemGroupKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'BulkMigrateListings'                 => [
            'method'        => 'POST',
            'resource'      => 'bulk_migrate_listing',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\BulkMigrateListingsRestResponse',
            'params'        => []
        ],
        'CreateInventoryLocation'             => [
            'method'        => 'POST',
            'resource'      => 'location/{merchantLocationKey}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\CreateInventoryLocationRestResponse',
            'params'        => [
                'merchantLocationKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DeleteInventoryLocation'             => [
            'method'        => 'DELETE',
            'resource'      => 'location/{merchantLocationKey}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\DeleteInventoryLocationRestResponse',
            'params'        => [
                'merchantLocationKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DisableInventoryLocation'            => [
            'method'        => 'POST',
            'resource'      => 'location/{merchantLocationKey}/disable',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\DisableInventoryLocationRestResponse',
            'params'        => [
                'merchantLocationKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'EnableInventoryLocation'             => [
            'method'        => 'POST',
            'resource'      => 'location/{merchantLocationKey}/enable',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\EnableInventoryLocationRestResponse',
            'params'        => [
                'merchantLocationKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetInventoryLocation'                => [
            'method'        => 'GET',
            'resource'      => 'location/{merchantLocationKey}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetInventoryLocationRestResponse',
            'params'        => [
                'merchantLocationKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetInventoryLocations'               => [
            'method'        => 'GET',
            'resource'      => 'location',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetInventoryLocationsRestResponse',
            'params'        => [
                'limit'  => [
                    'valid' => ['string']
                ],
                'offset' => [
                    'valid' => ['string']
                ]
            ]
        ],
        'UpdateInventoryLocation'             => [
            'method'        => 'POST',
            'resource'      => 'location/{merchantLocationKey}/update_location_details',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\UpdateInventoryLocationRestResponse',
            'params'        => [
                'merchantLocationKey' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateOffer'                         => [
            'method'        => 'POST',
            'resource'      => 'offer',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\CreateOfferRestResponse',
            'params'        => []
        ],
        'DeleteOffer'                         => [
            'method'        => 'DELETE',
            'resource'      => 'offer/{offerId}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\DeleteOfferRestResponse',
            'params'        => [
                'offerId' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetListingFees'                      => [
            'method'        => 'POST',
            'resource'      => 'offer/get_listing_fees',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetListingFeesRestResponse',
            'params'        => []
        ],
        'GetOffer'                            => [
            'method'        => 'GET',
            'resource'      => 'offer/{offerId}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetOfferRestResponse',
            'params'        => [
                'offerId' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetOffers'                           => [
            'method'        => 'GET',
            'resource'      => 'offer',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetOffersRestResponse',
            'params'        => [
                'format'         => [
                    'valid' => ['string']
                ],
                'limit'          => [
                    'valid' => ['string']
                ],
                'marketplace_id' => [
                    'valid' => ['string']
                ],
                'offset'         => [
                    'valid' => ['string']
                ],
                'sku'            => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'PublishOffer'                        => [
            'method'        => 'POST',
            'resource'      => 'offer/{offerId}/publish',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\PublishOfferRestResponse',
            'params'        => [
                'offerId' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'WithdrawOffer'                       => [
            'method'        => 'POST',
            'resource'      => 'offer/{offerId}/withdraw',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\WithdrawOfferRestResponse',
            'params'        => [
                'offerId' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'UpdateOffer'                         => [
            'method'        => 'PUT',
            'resource'      => 'offer/{offerId}',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\UpdateOfferRestResponse',
            'params'        => [
                'offerId' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'CreateOrReplaceProductCompatibility' => [
            'method'        => 'PUT',
            'resource'      => 'inventory_item/{sku}/product_compatibility',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\CreateOrReplaceProductCompatibilityRestResponse',
            'params'        => [
                'sku' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'DeleteProductCompatibility'          => [
            'method'        => 'DELETE',
            'resource'      => 'inventory_item/{sku}/product_compatibility',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\DeleteProductCompatibilityRestResponse',
            'params'        => [
                'sku' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'GetProductCompatibility'             => [
            'method'        => 'GET',
            'resource'      => 'inventory_item/{sku}/product_compatibility',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\GetProductCompatibilityRestResponse',
            'params'        => [
                'sku' => [
                    'valid'    => ['string'],
                    'required' => true
                ]
            ]
        ],
        'PublishOfferByInventoryItemGroup'    => [
            'method'        => 'POST',
            'resource'      => 'offer/publish_by_inventory_item_group',
            'responseClass' => '\DTS\eBaySDK\Inventory\Types\PublishOfferByInventoryItemGroupRestResponse',
            'params'        => []
        ]
    ];

    /**
     * @param array $config Configuration option values.
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }

    /**
     * @param BulkUpdatePriceAndQuantityRestRequest $request
     * @return BulkUpdatePriceAndQuantityRestResponse
     */
    public function bulkUpdatePriceAndQuantity(BulkUpdatePriceAndQuantityRestRequest $request)
    {
        return $this->bulkUpdatePriceAndQuantityAsync($request)->wait();
    }

    /**
     * @param BulkUpdatePriceAndQuantityRestRequest $request
     * @return PromiseInterface
     */
    public function bulkUpdatePriceAndQuantityAsync(BulkUpdatePriceAndQuantityRestRequest $request)
    {
        return $this->callOperationAsync('BulkUpdatePriceAndQuantity', $request);
    }

    /**
     * @param CreateOrReplaceInventoryItemRestRequest $request
     * @return CreateOrReplaceInventoryItemRestResponse
     */
    public function createOrReplaceInventoryItem(CreateOrReplaceInventoryItemRestRequest $request)
    {
        return $this->createOrReplaceInventoryItemAsync($request)->wait();
    }

    /**
     * @param CreateOrReplaceInventoryItemRestRequest $request
     * @return PromiseInterface
     */
    public function createOrReplaceInventoryItemAsync(CreateOrReplaceInventoryItemRestRequest $request)
    {
        return $this->callOperationAsync('CreateOrReplaceInventoryItem', $request);
    }

    /**
     * @param DeleteInventoryItemRestRequest $request
     * @return DeleteInventoryItemRestResponse
     */
    public function deleteInventoryItem(DeleteInventoryItemRestRequest $request)
    {
        return $this->deleteInventoryItemAsync($request)->wait();
    }

    /**
     * @param DeleteInventoryItemRestRequest $request
     * @return PromiseInterface
     */
    public function deleteInventoryItemAsync(DeleteInventoryItemRestRequest $request)
    {
        return $this->callOperationAsync('DeleteInventoryItem', $request);
    }

    /**
     * @param GetInventoryItemRestRequest $request
     * @return GetInventoryItemRestResponse
     */
    public function getInventoryItem(GetInventoryItemRestRequest $request)
    {
        return $this->getInventoryItemAsync($request)->wait();
    }

    /**
     * @param GetInventoryItemRestRequest $request
     * @return PromiseInterface
     */
    public function getInventoryItemAsync(GetInventoryItemRestRequest $request)
    {
        return $this->callOperationAsync('GetInventoryItem', $request);
    }

    /**
     * @param GetInventoryItemsRestRequest $request
     * @return GetInventoryItemsRestResponse
     */
    public function getInventoryItems(GetInventoryItemsRestRequest $request)
    {
        return $this->getInventoryItemsAsync($request)->wait();
    }

    /**
     * @param GetInventoryItemsRestRequest $request
     * @return PromiseInterface
     */
    public function getInventoryItemsAsync(GetInventoryItemsRestRequest $request)
    {
        return $this->callOperationAsync('GetInventoryItems', $request);
    }

    /**
     * @param CreateOrReplaceInventoryItemGroupRestRequest $request
     * @return CreateOrReplaceInventoryItemGroupRestResponse
     */
    public function createOrReplaceInventoryItemGroup(CreateOrReplaceInventoryItemGroupRestRequest $request)
    {
        return $this->createOrReplaceInventoryItemGroupAsync($request)->wait();
    }

    /**
     * @param CreateOrReplaceInventoryItemGroupRestRequest $request
     * @return PromiseInterface
     */
    public function createOrReplaceInventoryItemGroupAsync(CreateOrReplaceInventoryItemGroupRestRequest $request)
    {
        return $this->callOperationAsync('CreateOrReplaceInventoryItemGroup', $request);
    }

    /**
     * @param DeleteInventoryItemGroupRestRequest $request
     * @return DeleteInventoryItemGroupRestResponse
     */
    public function deleteInventoryItemGroup(DeleteInventoryItemGroupRestRequest $request)
    {
        return $this->deleteInventoryItemGroupAsync($request)->wait();
    }

    /**
     * @param DeleteInventoryItemGroupRestRequest $request
     * @return PromiseInterface
     */
    public function deleteInventoryItemGroupAsync(DeleteInventoryItemGroupRestRequest $request)
    {
        return $this->callOperationAsync('DeleteInventoryItemGroup', $request);
    }

    /**
     * @param GetInventoryItemGroupRestRequest $request
     * @return GetInventoryItemGroupRestResponse
     */
    public function getInventoryItemGroup(GetInventoryItemGroupRestRequest $request)
    {
        return $this->getInventoryItemGroupAsync($request)->wait();
    }

    /**
     * @param GetInventoryItemGroupRestRequest $request
     * @return PromiseInterface
     */
    public function getInventoryItemGroupAsync(GetInventoryItemGroupRestRequest $request)
    {
        return $this->callOperationAsync('GetInventoryItemGroup', $request);
    }

    /**
     * @param BulkMigrateListingsRestRequest $request
     * @return BulkMigrateListingsRestResponse
     */
    public function bulkMigrateListings(BulkMigrateListingsRestRequest $request)
    {
        return $this->bulkMigrateListingsAsync($request)->wait();
    }

    /**
     * @param BulkMigrateListingsRestRequest $request
     * @return PromiseInterface
     */
    public function bulkMigrateListingsAsync(BulkMigrateListingsRestRequest $request)
    {
        return $this->callOperationAsync('BulkMigrateListings', $request);
    }

    /**
     * @param CreateInventoryLocationRestRequest $request
     * @return CreateInventoryLocationRestResponse
     */
    public function createInventoryLocation(CreateInventoryLocationRestRequest $request)
    {
        return $this->createInventoryLocationAsync($request)->wait();
    }

    /**
     * @param CreateInventoryLocationRestRequest $request
     * @return PromiseInterface
     */
    public function createInventoryLocationAsync(CreateInventoryLocationRestRequest $request)
    {
        return $this->callOperationAsync('CreateInventoryLocation', $request);
    }

    /**
     * @param DeleteInventoryLocationRestRequest $request
     * @return DeleteInventoryLocationRestResponse
     */
    public function deleteInventoryLocation(DeleteInventoryLocationRestRequest $request)
    {
        return $this->deleteInventoryLocationAsync($request)->wait();
    }

    /**
     * @param DeleteInventoryLocationRestRequest $request
     * @return PromiseInterface
     */
    public function deleteInventoryLocationAsync(DeleteInventoryLocationRestRequest $request)
    {
        return $this->callOperationAsync('DeleteInventoryLocation', $request);
    }

    /**
     * @param DisableInventoryLocationRestRequest $request
     * @return DisableInventoryLocationRestResponse
     */
    public function disableInventoryLocation(DisableInventoryLocationRestRequest $request)
    {
        return $this->disableInventoryLocationAsync($request)->wait();
    }

    /**
     * @param DisableInventoryLocationRestRequest $request
     * @return PromiseInterface
     */
    public function disableInventoryLocationAsync(DisableInventoryLocationRestRequest $request)
    {
        return $this->callOperationAsync('DisableInventoryLocation', $request);
    }

    /**
     * @param EnableInventoryLocationRestRequest $request
     * @return EnableInventoryLocationRestResponse
     */
    public function enableInventoryLocation(EnableInventoryLocationRestRequest $request)
    {
        return $this->enableInventoryLocationAsync($request)->wait();
    }

    /**
     * @param EnableInventoryLocationRestRequest $request
     * @return PromiseInterface
     */
    public function enableInventoryLocationAsync(EnableInventoryLocationRestRequest $request)
    {
        return $this->callOperationAsync('EnableInventoryLocation', $request);
    }

    /**
     * @param GetInventoryLocationRestRequest $request
     * @return GetInventoryLocationRestResponse
     */
    public function getInventoryLocation(GetInventoryLocationRestRequest $request)
    {
        return $this->getInventoryLocationAsync($request)->wait();
    }

    /**
     * @param GetInventoryLocationRestRequest $request
     * @return PromiseInterface
     */
    public function getInventoryLocationAsync(GetInventoryLocationRestRequest $request)
    {
        return $this->callOperationAsync('GetInventoryLocation', $request);
    }

    /**
     * @param GetInventoryLocationsRestRequest $request
     * @return GetInventoryLocationsRestResponse
     */
    public function getInventoryLocations(GetInventoryLocationsRestRequest $request)
    {
        return $this->getInventoryLocationsAsync($request)->wait();
    }

    /**
     * @param GetInventoryLocationsRestRequest $request
     * @return PromiseInterface
     */
    public function getInventoryLocationsAsync(GetInventoryLocationsRestRequest $request)
    {
        return $this->callOperationAsync('GetInventoryLocations', $request);
    }

    /**
     * @param UpdateInventoryLocationRestRequest $request
     * @return UpdateInventoryLocationRestResponse
     */
    public function updateInventoryLocation(UpdateInventoryLocationRestRequest $request)
    {
        return $this->updateInventoryLocationAsync($request)->wait();
    }

    /**
     * @param UpdateInventoryLocationRestRequest $request
     * @return PromiseInterface
     */
    public function updateInventoryLocationAsync(UpdateInventoryLocationRestRequest $request)
    {
        return $this->callOperationAsync('UpdateInventoryLocation', $request);
    }

    /**
     * @param CreateOfferRestRequest $request
     * @return CreateOfferRestResponse
     */
    public function createOffer(CreateOfferRestRequest $request)
    {
        return $this->createOfferAsync($request)->wait();
    }

    /**
     * @param CreateOfferRestRequest $request
     * @return PromiseInterface
     */
    public function createOfferAsync(CreateOfferRestRequest $request)
    {
        return $this->callOperationAsync('CreateOffer', $request);
    }

    /**
     * @param DeleteOfferRestRequest $request
     * @return DeleteOfferRestResponse
     */
    public function deleteOffer(DeleteOfferRestRequest $request)
    {
        return $this->deleteOfferAsync($request)->wait();
    }

    /**
     * @param DeleteOfferRestRequest $request
     * @return PromiseInterface
     */
    public function deleteOfferAsync(DeleteOfferRestRequest $request)
    {
        return $this->callOperationAsync('DeleteOffer', $request);
    }

    /**
     * @param GetListingFeesRestRequest $request
     * @return GetListingFeesRestResponse
     */
    public function getListingFees(GetListingFeesRestRequest $request)
    {
        return $this->getListingFeesAsync($request)->wait();
    }

    /**
     * @param GetListingFeesRestRequest $request
     * @return PromiseInterface
     */
    public function getListingFeesAsync(GetListingFeesRestRequest $request)
    {
        return $this->callOperationAsync('GetListingFees', $request);
    }

    /**
     * @param GetOfferRestRequest $request
     * @return GetOfferRestResponse
     */
    public function getOffer(GetOfferRestRequest $request)
    {
        return $this->getOfferAsync($request)->wait();
    }

    /**
     * @param GetOfferRestRequest $request
     * @return PromiseInterface
     */
    public function getOfferAsync(GetOfferRestRequest $request)
    {
        return $this->callOperationAsync('GetOffer', $request);
    }

    /**
     * @param GetOffersRestRequest $request
     * @return GetOffersRestResponse
     */
    public function getOffers(GetOffersRestRequest $request)
    {
        return $this->getOffersAsync($request)->wait();
    }

    /**
     * @param GetOffersRestRequest $request
     * @return PromiseInterface
     */
    public function getOffersAsync(GetOffersRestRequest $request)
    {
        return $this->callOperationAsync('GetOffers', $request);
    }

    /**
     * @param PublishOfferRestRequest $request
     * @return PublishOfferRestResponse
     */
    public function publishOffer(PublishOfferRestRequest $request)
    {
        return $this->publishOfferAsync($request)->wait();
    }

    /**
     * @param PublishOfferRestRequest $request
     * @return PromiseInterface
     */
    public function publishOfferAsync(PublishOfferRestRequest $request)
    {
        return $this->callOperationAsync('PublishOffer', $request);
    }

    /**
     * @param WithdrawOfferRestRequest $request
     * @return WithdrawOfferRestResponse
     */
    public function withdrawOffer(WithdrawOfferRestRequest $request)
    {
        return $this->withdrawOfferAsync($request)->wait();
    }

    /**
     * @param WithdrawOfferRestRequest $request
     * @return PromiseInterface
     */
    public function withdrawOfferAsync(WithdrawOfferRestRequest $request)
    {
        return $this->callOperationAsync('WithdrawOffer', $request);
    }

    /**
     * @param UpdateOfferRestRequest $request
     * @return UpdateOfferRestResponse
     */
    public function updateOffer(UpdateOfferRestRequest $request)
    {
        return $this->updateOfferAsync($request)->wait();
    }

    /**
     * @param UpdateOfferRestRequest $request
     * @return PromiseInterface
     */
    public function updateOfferAsync(UpdateOfferRestRequest $request)
    {
        return $this->callOperationAsync('UpdateOffer', $request);
    }

    /**
     * @param CreateOrReplaceProductCompatibilityRestRequest $request
     * @return CreateOrReplaceProductCompatibilityRestResponse
     */
    public function createOrReplaceProductCompatibility(CreateOrReplaceProductCompatibilityRestRequest $request)
    {
        return $this->createOrReplaceProductCompatibilityAsync($request)->wait();
    }

    /**
     * @param CreateOrReplaceProductCompatibilityRestRequest $request
     * @return PromiseInterface
     */
    public function createOrReplaceProductCompatibilityAsync(CreateOrReplaceProductCompatibilityRestRequest $request)
    {
        return $this->callOperationAsync('CreateOrReplaceProductCompatibility', $request);
    }

    /**
     * @param DeleteProductCompatibilityRestRequest $request
     * @return DeleteProductCompatibilityRestResponse
     */
    public function deleteProductCompatibility(DeleteProductCompatibilityRestRequest $request)
    {
        return $this->deleteProductCompatibilityAsync($request)->wait();
    }

    /**
     * @param DeleteProductCompatibilityRestRequest $request
     * @return PromiseInterface
     */
    public function deleteProductCompatibilityAsync(DeleteProductCompatibilityRestRequest $request)
    {
        return $this->callOperationAsync('DeleteProductCompatibility', $request);
    }

    /**
     * @param GetProductCompatibilityRestRequest $request
     * @return GetProductCompatibilityRestResponse
     */
    public function getProductCompatibility(GetProductCompatibilityRestRequest $request)
    {
        return $this->getProductCompatibilityAsync($request)->wait();
    }

    /**
     * @param GetProductCompatibilityRestRequest $request
     * @return PromiseInterface
     */
    public function getProductCompatibilityAsync(GetProductCompatibilityRestRequest $request)
    {
        return $this->callOperationAsync('GetProductCompatibility', $request);
    }

    /**
     * @param PublishOfferByInventoryItemGroupRestRequest $request
     * @return PublishOfferByInventoryItemGroupRestResponse
     */
    public function publishOfferByInventoryItemGroup(PublishOfferByInventoryItemGroupRestRequest $request)
    {
        return $this->publishOfferByInventoryItemGroupAsync($request)->wait();
    }

    /**
     * @param PublishOfferByInventoryItemGroupRestRequest $request
     * @return PromiseInterface
     */
    public function publishOfferByInventoryItemGroupAsync(PublishOfferByInventoryItemGroupRestRequest $request)
    {
        return $this->callOperationAsync('PublishOfferByInventoryItemGroup', $request);
    }
}
